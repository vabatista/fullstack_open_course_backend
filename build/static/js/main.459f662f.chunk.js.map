{"version":3,"sources":["components/Phonebook.js","components/NewPerson.js","components/Filter.js","services/persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Phonebook","persons","sfilter","removePerson","filter","person","name","toLowerCase","includes","map","key","id","phone","onClick","event","preventDefault","NewPerson","addPerson","newName","newPhone","handleNameChange","handlePhoneChange","onSubmit","value","onChange","type","Filter","handleSfilterChange","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notification","message","isError","console","log","className","App","useState","setPersons","setNewName","setPhone","setSfilter","errorMessage","setErrorMessage","setIsError","useEffect","personsServices","returnedPersons","target","newPerson","number","list","length","window","confirm","returnedPerson","p","alert","concat","setTimeout","personId","catch","error","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2NAiBeA,EAfG,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aACnC,OACI,6BACKF,EAAQG,QAAO,SAAAC,GAAM,OAAIA,EAAOC,KAAKC,cAAcC,SAASN,EAAQK,kBAAgBE,KAAI,SAAAJ,GAAM,OAC3F,yBAAMK,IAAKL,EAAOM,IACbN,EAAOC,KADZ,IACmBD,EAAOO,MAD1B,IACiC,4BAAQC,QAAS,SAACC,GAC3CA,EAAMC,iBACNZ,EAAaE,EAAOM,MAFK,gBCYlCK,EAjBG,SAAC,GAAyE,IAAxEC,EAAuE,EAAvEA,UAAWC,EAA4D,EAA5DA,QAASC,EAAmD,EAAnDA,SAAUC,EAAyC,EAAzCA,iBAAkBC,EAAuB,EAAvBA,kBAEhE,OACI,0BAAMC,SAAUL,GACZ,sCACU,2BAAOM,MAAOL,EAASM,SAAUJ,KAE3C,uCACW,2BAAOG,MAAOJ,EAAUK,SAAUH,KAE7C,6BACI,4BAAQI,KAAK,UAAb,UCFDC,EATA,SAAC,GAAsC,IAApCxB,EAAmC,EAAnCA,QAASyB,EAA0B,EAA1BA,oBACvB,OACI,mDACuB,2BAAOJ,MAAOrB,EAASsB,SAAUG,M,gBCJ1DC,EAAU,eAkBD,EAhBA,WACb,OAAOC,IAAMC,IAAIF,GAASG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAevC,EAZA,SAAAC,GACb,OAAOL,IAAMM,KAAKP,EAASM,GAAWH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAWnD,EARA,SAACtB,EAAIuB,GAClB,OAAOL,IAAMO,IAAN,UAAaR,EAAb,YAAwBjB,GAAMuB,GAAWH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAO7D,EAJA,SAACtB,GACZ,OAAOkB,IAAMQ,OAAN,UAAgBT,EAAhB,YAA2BjB,IAAMoB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCSvDK,EAtBM,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAG7B,OAFAC,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GACI,OAAZD,EACO,KAEPC,EAEI,yBAAKG,UAAU,SACVJ,GAKL,yBAAKI,UAAU,gBACVJ,ICsHFK,EAjIH,WAAM,MAQcC,mBAAS,IARvB,mBAQT5C,EARS,KAQA6C,EARA,OAScD,mBAAS,IATvB,mBAST3B,EATS,KASA6B,EATA,OAUaF,mBAAS,IAVtB,mBAUT1B,EAVS,KAUC6B,EAVD,OAWcH,mBAAS,IAXvB,mBAWT3C,EAXS,KAWA+C,EAXA,OAYwBJ,mBAAS,MAZjC,mBAYTK,EAZS,KAYKC,EAZL,OAacN,oBAAS,GAbvB,mBAaTL,EAbS,KAaAY,EAbA,KAehBC,qBAAU,WACRZ,QAAQC,IAAI,2BACZY,IACGvB,MAAK,SAAAwB,GACJT,EAAWS,QAEd,IA4FH,OACE,6BACE,kBAAC,EAAD,CAAchB,QAASW,EAAcV,QAASA,IAE9C,yCACA,kBAAC,EAAD,CAAQtC,QAASA,EAASyB,oBAtBF,SAACb,GAC3B2B,QAAQC,IAAI,sCACZO,EAAWnC,EAAM0C,OAAOjC,UAqBtB,yCACA,kBAAC,EAAD,CAAWN,UAjGG,SAACH,GACjB2B,QAAQC,IAAI,4BACZ5B,EAAMC,iBAEN,IAAM0C,EAAY,CAChBnD,KAAMY,EACNwC,OAAQvC,GAGJwC,EAAO1D,EAAQG,QAAO,SAAAC,GAAM,OAAIA,EAAOC,OAASY,KAGtD,GAFqByC,EAAKC,OAAS,EAEjB,CAChB,IAAMjD,EAAKgD,EAAK,GAAGhD,GACfkD,OAAOC,QAAP,UAAkB5C,EAAlB,mDACFoC,EACQ3C,EAAI8C,GAAW1B,MAAK,SAAAgC,GAC1BjB,EAAW7C,EAAQQ,KAAI,SAAAuD,GAAC,OAAIA,EAAErD,KAAOA,EAAKqD,EAAID,MAC9ChB,EAAW,IACXC,EAAS,IACTI,GAAW,GACXD,EAAgB,2CAGlBV,QAAQC,IAAI,wBAEO,KAAZxB,EAA8B,KAAbC,EAC1B8C,MAAM,2CAGNX,EACUG,GAAW1B,MAAK,SAAAgC,GACtBjB,EAAW7C,EAAQiE,OAAOH,IAC1BhB,EAAW,IACXC,EAAS,IACTI,GAAW,GACXD,EAAgB,sCAChBgB,YAAW,WACThB,EAAgB,MAChBC,GAAW,KACV,SAyD0BlC,QAASA,EAASC,SAAUA,EACvDC,iBApBe,SAACN,GACxB2B,QAAQC,IAAI,mCACZ5B,EAAMC,iBACNgC,EAAWjC,EAAM0C,OAAOjC,QAiBoBF,kBAdpB,SAACP,GACzB2B,QAAQC,IAAI,oCACZ5B,EAAMC,iBACNiC,EAASlC,EAAM0C,OAAOjC,UAapB,uCACA,kBAAC,EAAD,CAAWtB,QAASA,EAASC,QAASA,EAASC,aAvD9B,SAACiE,GACpB3B,QAAQC,IAAI,8BAA+B0B,GACvCP,OAAOC,QAAQ,6CACjBR,EACUc,GAAUrC,MAAK,SAAAgC,GACrBhB,EAAW,IACXC,EAAS,IACTG,EAAgB,wCAChBgB,YAAW,WACThB,EAAgB,MAChBC,GAAW,KACV,QAEFiB,OAAM,SAAAC,GACPlB,GAAW,GACXD,EAAgB,0CAChBgB,YAAW,WACThB,EAAgB,MAChBC,GAAW,KACV,QAELN,EAAW7C,EAAQG,QAAO,SAAA4D,GAAC,OAAIA,EAAErD,KAAOyD,OAE1C3B,QAAQC,IAAI,6BCvFE6B,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdf,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAM/B,c","file":"static/js/main.459f662f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Phonebook = ({ persons, sfilter, removePerson }) => {\r\n    return (\r\n        <div>\r\n            {persons.filter(person => person.name.toLowerCase().includes(sfilter.toLowerCase())).map(person => (\r\n                < div key={person.id}> \r\n                    {person.name} {person.phone} <button onClick={(event) => {\r\n                        event.preventDefault()\r\n                        removePerson(person.id)}\r\n                    }>Delete</button>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Phonebook    ","import React from 'react'\r\n\r\nconst NewPerson = ({addPerson, newName, newPhone, handleNameChange, handlePhoneChange}) => {\r\n    \r\n    return (\r\n        <form onSubmit={addPerson}>\r\n            <div>\r\n                Name: <input value={newName} onChange={handleNameChange} />\r\n            </div>\r\n            <div>\r\n                Phone: <input value={newPhone} onChange={handlePhoneChange} />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NewPerson","import React from 'react'\r\n\r\nconst Filter = ({ sfilter, handleSfilterChange }) => {\r\n    return (\r\n        <div>\r\n            Filter shown with: <input value={sfilter} onChange={handleSfilterChange} />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Filter","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl).then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject).then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject).then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`).then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, remove }\r\n","//Code copied from example https://github.com/fullstack-hy2020/part2-notes/blob/part2-7/src/components/Notification.js\r\nimport React from 'react'\r\n\r\nconst Notification = ({ message, isError }) => {\r\n    console.log(message)\r\n    console.log(isError)\r\n    if (message === null) {\r\n        return null\r\n    }\r\n    if (isError) {\r\n        return (\r\n            <div className=\"error\">\r\n                {message}\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"notification\">\r\n                {message}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Phonebook from './components/Phonebook'\nimport NewPerson from './components/NewPerson'\nimport Filter from './components/Filter'\nimport personsServices from './services/persons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  /*   const [ persons, setPersons ] = useState(([\n      { name: 'Arto Hellas', phone: '040-123456' },\n      { name: 'Ada Lovelace', phone: '39-44-5323523' },\n      { name: 'Dan Abramov', phone: '12-43-234345' },\n      { name: 'Mary Poppendieck', phone: '39-23-6423122' }\n    ])) \n   */\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newPhone, setPhone] = useState('')\n  const [sfilter, setSfilter] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [isError, setIsError] = useState(false)\n\n  useEffect(() => {\n    console.log('Entered useEffect event')\n    personsServices.getAll()\n      .then(returnedPersons => {\n        setPersons(returnedPersons)\n      })\n  }, [])\n\n  const addPerson = (event) => {\n    console.log('Entered addPerson mehtod')\n    event.preventDefault()\n\n    const newPerson = {\n      name: newName,\n      number: newPhone\n    }\n\n    const list = persons.filter(person => person.name === newName)\n    const personExists = list.length > 0\n    \n    if (personExists) {\n      const id = list[0].id\n      if (window.confirm(`${newName} already is in phonebook. Update phone number?`)) {\n        personsServices\n        .update(id, newPerson).then(returnedPerson => {\n          setPersons(persons.map(p => p.id !== id ? p : returnedPerson))\n          setNewName('')\n          setPhone('')\n          setIsError(false)\n          setErrorMessage(\"Person updated sucessful into server\")\n        })        \n      } else {\n        console.log(\"Update canceled!\")\n      }\n    } else if (newName === '' | newPhone === '') {\n      alert(\"Either Name and Phone should be filled.\")\n    } else {\n\n      personsServices\n        .create(newPerson).then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setPhone('')\n          setIsError(false)\n          setErrorMessage(\"Person added sucessful into server\")\n          setTimeout(() => {\n            setErrorMessage(null)\n            setIsError(false)\n          }, 5000)          \n        })\n\n    }\n  }\n\n  const removePerson = (personId) => {\n    console.log('Entered removePerson mehtod', personId)\n    if (window.confirm(\"Do you really want to remove this entry?\")) {\n      personsServices\n        .remove(personId).then(returnedPerson => {\n          setNewName('')\n          setPhone('')\n          setErrorMessage(\"Person sucessful removed from server\")\n          setTimeout(() => {\n            setErrorMessage(null)\n            setIsError(false)\n          }, 5000)\n\n        }).catch(error => {\n          setIsError(true)\n          setErrorMessage(\"Person was already removed from server\")\n          setTimeout(() => {\n            setErrorMessage(null)\n            setIsError(false)\n          }, 5000)\n        })\n        setPersons(persons.filter(p => p.id !== personId))\n    } else {\n      console.log('Cancel remove person')\n    }\n  }\n\n  const handleSfilterChange = (event) => {\n    console.log('Entered handleSfilterChange mehtod')\n    setSfilter(event.target.value)\n  }\n\n  const handleNameChange = (event) => {\n    console.log('Entered handleNameChange mehtod')\n    event.preventDefault()\n    setNewName(event.target.value)\n  }\n\n  const handlePhoneChange = (event) => {\n    console.log('Entered handlePhoneChange mehtod')\n    event.preventDefault()\n    setPhone(event.target.value)\n  }\n\n  return (\n    <div>\n      <Notification message={errorMessage} isError={isError} />\n\n      <h2>Phonebook</h2>\n      <Filter sfilter={sfilter} handleSfilterChange={handleSfilterChange} />\n      <h2>add a new</h2>\n      <NewPerson addPerson={addPerson} newName={newName} newPhone={newPhone} \n            handleNameChange={handleNameChange} handlePhoneChange={handlePhoneChange} />\n\n      <h2>Numbers</h2>\n      <Phonebook persons={persons} sfilter={sfilter} removePerson={removePerson} />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}